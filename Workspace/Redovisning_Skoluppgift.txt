# üìä Sammanfattning av Implementerad Funktionalitet - Skoluppgift

## 1. En relationsdatabas med minst tv√• relaterade tabeller ‚úÖ

**Lokalisering**: `/DatabaseScripts/` och `/Migrations/`

**Implementering**:
- **Users-tabellen**: Lagrar anv√§ndarinformation (ID, Username, Email, PasswordHash)
- **Portfolio-tabellen**: Lagrar anv√§ndarnas kryptovaluta-innehav
- **DigitalAssets-tabellen**: Lagrar information om kryptovalutor
- **Relation**: Portfolio har foreign keys till b√•de Users (user_id) och DigitalAssets (asset_id)

**Bevis**:
```sql
-- I create_portfolio_tables.sql
CREATE TABLE Users (
    Id int IDENTITY(1,1) PRIMARY KEY,
    Username nvarchar(50) NOT NULL UNIQUE,
    Email nvarchar(100) NOT NULL UNIQUE,
    PasswordHash nvarchar(255) NOT NULL
);

CREATE TABLE Portfolio (
    Id int IDENTITY(1,1) PRIMARY KEY,
    user_id int NOT NULL,
    asset_id int NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(Id),
    FOREIGN KEY (asset_id) REFERENCES DigitalAssets(AssetId)
);
```

---

## 2. Ett eget DAL, Data Access Layer ‚úÖ

**Lokalisering**: `/Services/SimpleAuthenticationService.cs`

**Implementering**: 
Skapat ett **f√∂renklat DAL** med direkt SQL-anrop ist√§llet f√∂r Entity Framework f√∂r att visa f√∂rst√•else f√∂r grundl√§ggande databas√•tkomst.

**Bevis**:
```csharp
// SimpleAuthenticationService.cs - Eget DAL med direkt SQL
public async Task<User?> ValidateUserAsync(string username, string password)
{
    const string query = @"
        SELECT Id, Username, Email, PasswordHash 
        FROM Users 
        WHERE Username = @Username";
    
    using var connection = new SqlConnection(_connectionString);
    using var command = new SqlCommand(query, connection);
    command.Parameters.AddWithValue("@Username", username);
    
    await connection.OpenAsync();
    using var reader = await command.ExecuteReaderAsync();
    
    if (await reader.ReadAsync())
    {
        var storedHash = reader.GetString("PasswordHash");
        if (BCrypt.Net.BCrypt.Verify(password, storedHash))
        {
            return new User
            {
                Id = reader.GetInt32("Id"),
                Username = reader.GetString("Username"),
                Email = reader.GetString("Email")
            };
        }
    }
    return null;
}
```

---

## 3. Full CRUD-funktionalitet ‚úÖ

**Lokalisering**: `/Controllers/PortfolioController.cs` och `/Services/PortfolioService.cs`

**Implementering**:
- **Create**: L√§gg till nya kryptovalutor i portf√∂ljen
- **Read**: Visa portf√∂ljinneh√•ll och kryptovaluta-listor  
- **Update**: Redigera befintliga portfolioinl√§gg
- **Delete**: Ta bort portfolioinl√§gg

**Bevis**:
```csharp
// PortfolioController.cs
[HttpPost]
public async Task<IActionResult> Create(PortfolioItemViewModel model) // CREATE
{
    if (ModelState.IsValid)
    {
        await _portfolioService.AddPortfolioItemAsync(userId, model);
        return RedirectToAction("Index");
    }
    return View(model);
}

public async Task<IActionResult> Index() // READ
{
    var portfolioItems = await _portfolioService.GetUserPortfolioAsync(userId);
    return View(portfolioItems);
}

[HttpPost]
public async Task<IActionResult> Edit(int id, PortfolioItemViewModel model) // UPDATE
{
    if (ModelState.IsValid)
    {
        await _portfolioService.UpdatePortfolioItemAsync(id, model);
        return RedirectToAction("Index");
    }
    return View(model);
}

[HttpPost]
public async Task<IActionResult> Delete(int id) // DELETE
{
    await _portfolioService.DeletePortfolioItemAsync(id);
    return RedirectToAction("Index");
}
```

**Vyer**: `/Views/Portfolio/Create.cshtml`, `Index.cshtml`, `Edit.cshtml`, `Delete.cshtml`

---

## 4. Valfri s√∂kfunktion ‚úÖ

**Lokalisering**: `/Controllers/CryptoMarketController.cs` och `/Views/CryptoMarket/Top100.cshtml`

**Implementering**: 
S√∂kfunktion f√∂r kryptovalutor med text-input och s√∂kknapp som s√∂ker i namn, symbol och ID.

**Bevis**:
```csharp
// CryptoMarketController.cs
public async Task<IActionResult> Top100(string sortBy = "marketcap", 
                                       string category = "", 
                                       string search = "")
{
    var cryptos = await _btcPriceService.GetTop100CryptosAsync();
    
    // Filter by search term if specified
    if (!string.IsNullOrEmpty(search))
    {
        cryptos = cryptos.Where(c => 
            c.Name.Contains(search, StringComparison.OrdinalIgnoreCase) ||
            c.Symbol.Contains(search, StringComparison.OrdinalIgnoreCase) ||
            c.Id.Contains(search, StringComparison.OrdinalIgnoreCase)
        ).ToList();
    }
    
    return View(cryptos);
}
```

**UI-implementation**:
```html
<!-- I Top100.cshtml -->
<form method="get" class="d-flex gap-2 mb-3">
    <input type="hidden" name="sortBy" value="@currentSort" />
    <input type="hidden" name="category" value="@currentCategory" />
    <div class="flex-grow-1">
        <input type="text" name="search" class="form-control" 
               placeholder="S√∂k efter kryptovaluta (namn, symbol eller ID)..." 
               value="@currentSearch" />
    </div>
    <button type="submit" class="btn btn-primary">
        <i class="fas fa-search"></i> S√∂k
    </button>
</form>
```

---

## 5. Valfri filtreringsfunktion ‚úÖ

**Lokalisering**: `/Controllers/CryptoMarketController.cs` och `/Views/CryptoMarket/Top100.cshtml`

**Implementering**: 
Kategorifiltrering med knappar f√∂r olika kryptovaluta-kategorier som Layer 1, Memes, DeFi, Exchange, RWA etc.

**Bevis**:
```csharp
// CryptoMarketController.cs
// Filter by category if specified
if (!string.IsNullOrEmpty(category))
{
    cryptos = cryptos.Where(c => 
        c.Categories.Contains(category, StringComparer.OrdinalIgnoreCase)
    ).ToList();
}

// Get all available categories for filter buttons
private List<string> GetAllCategories(List<CryptoMarketModel> cryptos)
{
    return cryptos
        .SelectMany(c => c.Categories)
        .Distinct()
        .OrderBy(c => c)
        .ToList();
}
```

**UI-implementation**:
```html
<!-- Kategori-filterknappar -->
<div class="d-flex flex-wrap gap-2 mb-3">
    <a href="@Url.Action("Top100", new { sortBy = currentSort, category = "" })" 
       class="btn @(string.IsNullOrEmpty(currentCategory) ? "btn-primary" : "btn-outline-primary") btn-sm">
        All
    </a>
    @foreach (var category in allCategories)
    {
        <a href="@Url.Action("Top100", new { sortBy = currentSort, category = category })" 
           class="btn @(currentCategory.Equals(category, StringComparison.OrdinalIgnoreCase) ? "btn-primary" : "btn-outline-primary") btn-sm">
            @category
        </a>
    }
</div>
```

---

## 6. Valfri sorteringsfunktion ‚úÖ

**Lokalisering**: `/Controllers/CryptoMarketController.cs` och `/Views/CryptoMarket/Top100.cshtml`

**Implementering**: 
Sortering p√• klickbara kolumnrubriker f√∂r pris, 24h-f√∂r√§ndring, market cap och volym.

**Bevis**:
```csharp
// CryptoMarketController.cs  
// Sort the data based on user selection
cryptos = sortBy.ToLower() switch
{
    "price" => cryptos.OrderByDescending(c => c.CurrentPrice).ToList(),
    "change" => cryptos.OrderByDescending(c => c.PriceChangePercentage24h).ToList(),
    "volume" => cryptos.OrderByDescending(c => c.TotalVolume).ToList(),
    "marketcap" or _ => cryptos.OrderByDescending(c => c.MarketCap).ToList()
};

// Pass current sort state to view
ViewBag.CurrentSort = sortBy;
```

**UI-implementation**:
```html
<!-- Klickbara kolumnrubriker -->
<th scope="col">
    <a href="@Url.Action("Top100", new { sortBy = "price", category = currentCategory, search = currentSearch })" 
       class="text-decoration-none text-white">
        Price @if (currentSort == "price") { <i class="fas fa-sort-down"></i> }
    </a>
</th>
<th scope="col">
    <a href="@Url.Action("Top100", new { sortBy = "change", category = currentCategory, search = currentSearch })" 
       class="text-decoration-none text-white">
        24h Change @if (currentSort == "change") { <i class="fas fa-sort-down"></i> }
    </a>
</th>
```

---

## 7. Validering av data ‚úÖ

**Lokalisering**: `/Services/SimpleAuthenticationService.cs` och `/Views/SimpleAccount/Register.cshtml`

**Implementering**: 
- **Server-side validering**: Email-format med regex och duplicat-kontroll
- **Client-side validering**: HTML5 input-attribut och Bootstrap-validering

**Bevis**:
```csharp
// SimpleAuthenticationService.cs - Server-side validering
private bool IsValidEmail(string email)
{
    const string emailPattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
    return Regex.IsMatch(email, emailPattern);
}

public async Task<string> RegisterUserAsync(string username, string email, string password)
{
    // Validera email-format
    if (!IsValidEmail(email))
        return "Ogiltig email-format.";
    
    // Kolla om username redan finns
    if (await UserExistsAsync(username))
        return "Anv√§ndarnamnet √§r redan taget.";
    
    // Kolla om email redan finns
    if (await EmailExistsAsync(email))
        return "Email-adressen √§r redan registrerad.";
    
    // Forts√§tt med registrering...
}

private async Task<bool> UserExistsAsync(string username)
{
    const string query = "SELECT COUNT(*) FROM Users WHERE Username = @Username";
    using var connection = new SqlConnection(_connectionString);
    using var command = new SqlCommand(query, connection);
    command.Parameters.AddWithValue("@Username", username);
    
    await connection.OpenAsync();
    var count = (int)await command.ExecuteScalarAsync();
    return count > 0;
}
```

**UI-validering**:
```html
<!-- I Register.cshtml - Client-side validering -->
<div class="mb-3">
    <label for="Username" class="form-label">Anv√§ndarnamn</label>
    <input type="text" class="form-control" id="Username" name="Username" 
           required maxlength="50" />
    <div class="invalid-feedback">
        V√§nligen ange ett giltigt anv√§ndarnamn.
    </div>
</div>

<div class="mb-3">
    <label for="Email" class="form-label">Email</label>
    <input type="email" class="form-control" id="Email" name="Email" 
           required />
    <div class="invalid-feedback">
        V√§nligen ange en giltig email-adress.
    </div>
</div>

<div class="mb-3">
    <label for="Password" class="form-label">L√∂senord</label>
    <input type="password" class="form-control" id="Password" name="Password" 
           required minlength="6" />
    <div class="invalid-feedback">
        L√∂senordet m√•ste vara minst 6 tecken l√•ngt.
    </div>
</div>
```

---

## üéØ Sammanfattning f√∂r Redovisning

**Alla skoluppgiftens krav √§r uppfyllda:**

1. **‚úÖ Relationsdatabas**: Users, Portfolio och DigitalAssets med foreign key-relationer
2. **‚úÖ Eget DAL**: SimpleAuthenticationService med direkt SQL-queries
3. **‚úÖ Full CRUD**: PortfolioController med Create, Read, Update, Delete f√∂r portf√∂ljhantering  
4. **‚úÖ S√∂kfunktion**: Textbaserad s√∂kning i kryptovaluta namn, symbol och ID
5. **‚úÖ Filtreringsfunktion**: Kategorifiltrering med knappar f√∂r olika crypto-typer
6. **‚úÖ Sorteringsfunktion**: Klickbara kolumnrubriker f√∂r sortering p√• olika v√§rden
7. **‚úÖ Datavalidering**: Email-format, duplicatkontroll server-side + HTML5 client-side

**Teknologier som anv√§nts**: ASP.NET Core MVC, SQL Server, Entity Framework Core, Bootstrap, C# 9.0, BCrypt f√∂r l√∂senordskryptering.

**Arkitektur**: MVC-pattern med separata Controllers, Services (DAL), Models och Views f√∂r clean separation of concerns.

---

## üìÅ Projektstruktur

```
WebApp/
‚îú‚îÄ‚îÄ Controllers/
‚îÇ   ‚îú‚îÄ‚îÄ HomeController.cs
‚îÇ   ‚îú‚îÄ‚îÄ PortfolioController.cs          # CRUD-funktionalitet
‚îÇ   ‚îú‚îÄ‚îÄ CryptoMarketController.cs       # S√∂k, filter, sortering
‚îÇ   ‚îî‚îÄ‚îÄ SimpleAccountController.cs      # Autentisering
‚îú‚îÄ‚îÄ Services/
‚îÇ   ‚îú‚îÄ‚îÄ SimpleAuthenticationService.cs  # Eget DAL
‚îÇ   ‚îú‚îÄ‚îÄ PortfolioService.cs            # CRUD-operationer
‚îÇ   ‚îî‚îÄ‚îÄ BtcPriceService.cs              # Krypto-data
‚îú‚îÄ‚îÄ Models/
‚îÇ   ‚îú‚îÄ‚îÄ User.cs                         # Anv√§ndarmodell
‚îÇ   ‚îú‚îÄ‚îÄ Portfolio.cs                    # Portfolio-entitet
‚îÇ   ‚îú‚îÄ‚îÄ DigitalAsset.cs                 # Krypto-tillg√•ng
‚îÇ   ‚îî‚îÄ‚îÄ CryptoMarketModel.cs            # Market-data
‚îú‚îÄ‚îÄ Views/
‚îÇ   ‚îú‚îÄ‚îÄ Portfolio/                      # CRUD-vyer
‚îÇ   ‚îú‚îÄ‚îÄ CryptoMarket/                   # S√∂k/filter/sort-vyer
‚îÇ   ‚îî‚îÄ‚îÄ SimpleAccount/                  # Autentisering-vyer
‚îú‚îÄ‚îÄ DatabaseScripts/
‚îÇ   ‚îî‚îÄ‚îÄ create_portfolio_tables.sql     # Databasschema
‚îî‚îÄ‚îÄ Data/
    ‚îî‚îÄ‚îÄ ApplicationDbContext.cs         # EF Context
```

Detta projekt demonstrerar alla kr√§vda koncept f√∂r en godk√§nd laboration inom webbutveckling och databashantering.