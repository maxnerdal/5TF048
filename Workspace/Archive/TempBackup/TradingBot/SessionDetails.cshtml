@model WebApp.Controllers.SessionDetailsViewModel
@{
    ViewData["Title"] = "Trading Session Details";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1>ðŸ“Š Trading Session Details</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a asp-action="Index">Trading Bots</a></li>
                            <li class="breadcrumb-item active">Session #@Model.Session.SessionId</li>
                        </ol>
                    </nav>
                </div>
                <a asp-action="Index" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left"></i> Back to Trading Bots
                </a>
            </div>
        </div>
    </div>

    <!-- Session Overview -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Session Overview</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>Bot Name:</strong></td>
                                    <td>@Model.Session.UserBot?.Name</td>
                                </tr>
                                <tr>
                                    <td><strong>Session ID:</strong></td>
                                    <td>#@Model.Session.SessionId</td>
                                </tr>
                                <tr>
                                    <td><strong>Mode:</strong></td>
                                    <td><span class="badge bg-info">@Model.Session.Mode</span></td>
                                </tr>
                                <tr>
                                    <td><strong>Status:</strong></td>
                                    <td>
                                        @{
                                            var statusClass = Model.Session.Status switch
                                            {
                                                "Running" => "primary",
                                                "Completed" => "success",
                                                "Stopped" => "danger",
                                                "Error" => "danger",
                                                _ => "secondary"
                                            };
                                        }
                                        <span class="badge bg-@statusClass">@Model.Session.Status</span>
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>Start Time:</strong></td>
                                    <td>@Model.Session.StartTime.ToString("MMM dd, yyyy HH:mm:ss")</td>
                                </tr>
                                <tr>
                                    <td><strong>End Time:</strong></td>
                                    <td>
                                        @if (Model.Session.EndTime.HasValue)
                                        {
                                            @Model.Session.EndTime.Value.ToString("MMM dd, yyyy HH:mm:ss")
                                        }
                                        else
                                        {
                                            <span class="text-muted">Still running</span>
                                        }
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Duration:</strong></td>
                                    <td>
                                        @{
                                            var endTime = Model.Session.EndTime ?? DateTime.UtcNow;
                                            var duration = endTime - Model.Session.StartTime;
                                        }
                                        @if (duration.TotalDays >= 1)
                                        {
                                            @($"{(int)duration.TotalDays} days, {duration.Hours}h {duration.Minutes}m")
                                        }
                                        else if (duration.TotalHours >= 1)
                                        {
                                            @($"{duration.Hours}h {duration.Minutes}m")
                                        }
                                        else
                                        {
                                            @($"{duration.Minutes}m {duration.Seconds}s")
                                        }
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Performance Metrics -->
    @if (Model.Metrics != null)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Performance Metrics</h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-md-2">
                                <div class="metric-card">
                                    <div class="metric-value text-primary">$@Model.Metrics.TotalInvested.ToString("N2")</div>
                                    <div class="metric-label">Total Invested</div>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="metric-card">
                                    <div class="metric-value text-info">$@Model.Metrics.TotalValue.ToString("N2")</div>
                                    <div class="metric-label">Current Value</div>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="metric-card">
                                    @{
                                        var profitLoss = Model.Metrics.TotalValue - Model.Metrics.TotalInvested;
                                        var profitClass = profitLoss >= 0 ? "text-success" : "text-danger";
                                        var profitSign = profitLoss >= 0 ? "+" : "";
                                    }
                                    <div class="metric-value @profitClass">@profitSign$@profitLoss.ToString("N2")</div>
                                    <div class="metric-label">Profit/Loss</div>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="metric-card">
                                    @{
                                        var roiClass = Model.Metrics.ROI >= 0 ? "text-success" : "text-danger";
                                        var roiSign = Model.Metrics.ROI >= 0 ? "+" : "";
                                    }
                                    <div class="metric-value @roiClass">@roiSign@Model.Metrics.ROI.ToString("N2")%</div>
                                    <div class="metric-label">ROI</div>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="metric-card">
                                    <div class="metric-value text-warning">@Model.Metrics.TotalTrades</div>
                                    <div class="metric-label">Total Trades</div>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="metric-card">
                                    @if (Model.Metrics.WinRate.HasValue)
                                    {
                                        <div class="metric-value text-success">@Model.Metrics.WinRate.Value.ToString("N1")%</div>
                                    }
                                    else
                                    {
                                        <div class="metric-value text-muted">N/A</div>
                                    }
                                    <div class="metric-label">Win Rate</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Balance Information -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">ðŸ’° Balance Information</h6>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span>Initial Balance:</span>
                        <span class="fw-bold">$@Model.Session.InitialBalance.ToString("N2")</span>
                    </div>
                    @if (Model.Session.FinalBalance.HasValue)
                    {
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span>Final Balance:</span>
                            <span class="fw-bold">$@Model.Session.FinalBalance.Value.ToString("N2")</span>
                        </div>
                        var balanceChange = Model.Session.FinalBalance.Value - Model.Session.InitialBalance;
                        var balanceClass = balanceChange >= 0 ? "text-success" : "text-danger";
                        var balanceSign = balanceChange >= 0 ? "+" : "";
                        <div class="d-flex justify-content-between align-items-center">
                            <span>Change:</span>
                            <span class="fw-bold @balanceClass">@balanceSign$@balanceChange.ToString("N2")</span>
                        </div>
                    }
                    else
                    {
                        <div class="text-muted">
                            <small>Session is still running</small>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">ðŸ“ˆ Quick Stats</h6>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span>Number of Trades:</span>
                        <span class="fw-bold">@Model.Trades.Count</span>
                    </div>
                    @if (Model.Trades.Any())
                    {
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span>Average Trade Size:</span>
                            <span class="fw-bold">$@Model.Trades.Average(t => t.Value).ToString("N2")</span>
                        </div>
                        <div class="d-flex justify-content-between align-items-center">
                            <span>Total Volume:</span>
                            <span class="fw-bold">$@Model.Trades.Sum(t => t.Value).ToString("N2")</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Trades Table -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">ðŸ”„ Trade History</h5>
                    <span class="badge bg-secondary">@Model.Trades.Count trades</span>
                </div>
                <div class="card-body p-0">
                    @if (Model.Trades.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Trade ID</th>
                                        <th>Timestamp</th>
                                        <th>Symbol</th>
                                        <th>Side</th>
                                        <th>Price</th>
                                        <th>Quantity</th>
                                        <th>Value</th>
                                        <th>Fee</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var trade in Model.Trades)
                                    {
                                        <tr>
                                            <td><small>#@trade.TradeId</small></td>
                                            <td>
                                                <small>@trade.Timestamp.ToString("yyyy-MM-dd, HH:mm:ss")</small>
                                            </td>
                                            <td>
                                                <span class="badge bg-light text-dark">@trade.Symbol</span>
                                            </td>
                                            <td>
                                                @{
                                                    var sideClass = trade.Side == "BUY" ? "success" : "danger";
                                                }
                                                <span class="badge bg-@sideClass">@trade.Side</span>
                                            </td>
                                            <td>$@trade.Price.ToString("N8")</td>
                                            <td>@trade.Quantity.ToString("N8")</td>
                                            <td>$@trade.Value.ToString("N2")</td>
                                            <td>
                                                @if (trade.Fee > 0)
                                                {
                                                    <span class="text-warning">$@trade.Fee.ToString("N8")</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="p-4 text-center text-muted">
                            <i class="bi bi-arrow-left-right fs-1"></i>
                            <p>No trades executed yet</p>
                            <small>Trades will appear here when the bot starts executing</small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .metric-card {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #f8f9fa;
        margin-bottom: 1rem;
    }
    
    .metric-value {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 0.25rem;
    }
    
    .metric-label {
        font-size: 0.875rem;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .table-borderless td {
        border: none;
        padding: 0.25rem 0.75rem;
    }
    
    .table-borderless td:first-child {
        padding-left: 0;
    }
</style>